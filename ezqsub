#!/oasis/projects/nsf/sua131/peanut/bin/python3
# -*- coding: utf-8 -*-
# vim:fenc=utf-8 tabstop=4 expandtab shiftwidth=4 softtabstop=4
#
# Copyright Â© Mike Dacre <mike.dacre@gmail.com>
#
# Distributed under terms of the MIT license
"""
#====================================================================================
#
#          FILE: ezqsub (python 3)
#        AUTHOR: Michael D Dacre, mike.dacre@gmail.com
#  ORGANIZATION: Stanford University
#       LICENSE: MIT License
#       VERSION: 0.1
#       CREATED: 2013-12-26 17:37
# Last modified: 2013-12-26 18:03
#
#   DESCRIPTION: Take a file of scripts and submit it to the gordon cluster
#                The file should be one line per job, the lines can be arbitrarily
#                long and complex bash scripts, just use semi-colons instead of new-
#                lines.
#                To modify the qsub parameters, use the -l command, to modify the 
#                queue, use the -q command.  Note that the '-l nodes=' qsub Command
#                will always be '-l nodes=1:native' in this script.  To use multiple
#                nodes together with MPI, use the bundler.py script.
#
#         USAGE: ezqsub script_file.txt or ezqsub < script_file.txt
#
#====================================================================================
"""

# Set the defaults
default_address = 'sua131'
default_queue   = 'normal'
default_params  = 'walltime=336:00:0'

def split_and_submit(infile, queue='normal', params=''):
    """
    Take a file of scripts and submit it to the gordon cluster
    The file should be one line per job, the lines can be arbitrarily
    long and complex bash scripts, just use semi-colons instead of new-
    lines.
    You can modify the queue with the queue variable or any other qsub 
    parameters using the params variable
    """

def _get_args():
    """Command Line Argument Parsing"""
    import argparse, sys
    
    parser = argparse.ArgumentParser(
                 description=__doc__,
                 formatter_class=argparse.RawDescriptionHelpFormatter)

    # Optional Files
    parser.add_argument('-i', '--infile', nargs='?', default=sys.stdin, 
                        help="Input file, Default STDIN")
    
    # Optional Arguments
    parser.add_argument('-q', '--queue', default=default_queue, 
            help=''.join(["Queue Choice, Default: ", default_queue]) )
    parser.add_argument('-l', '--params', default=default_params,
            help=''.join([ "qsub parameters, Default: ", default_params]) )
    parser.add_argument('-a', '--billing', default=default_address,
            help=''.join(["Choose the address to bill to, find this with ",
                          "show_account or on portal.xsedeq.org",
                          ", Default: ", default_address]) )
    
    return parser

# Main function for direct running
def main():
    """Run directly"""
    # Get commandline arguments
    parser = _get_args()
    args = parser.parse_args()

    # Do Stuff
    if isinstance(args.infile, str):
        infile_string = True
    else:
        infile_string = False
    
    if infile_string:
        with open(args.infile, 'r') as infile:
            split_and_submit(infile, args.queue, args.params)
    else:
        split_and_submit(infile, args.queue, args.params)
        

# The end
if __name__ == '__main__':
    main()
